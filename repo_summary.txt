The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encounted. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.
----
.github/dependabot.yml
version: 2
updates:
  # Maintain dependencies for npm
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "monthly"
    commit-message:
      # Prefix all commit messages
      prefix: "[Dependabot] npm"
    labels:
      # Add these labels to the Generated PR
      - "npm"
      - "dependencies"
      - "update"
    allow:
      # Allow specific libraries to be updated
      # By default, it would check everything, even in the lock
      - "react*"
      - "redux*"
      - 
    
----
.vscode/launch.json
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "attach",
            "name": "Attach",
            "port": 5001
        },
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "program": "${workspaceFolder}/server/server.js"
        }
    ]
}

----
PostmanPrimeSoloRoutesv2.json
{
    "info": {
        "_postman_id": "5e3e8d98-813d-5d2a-a79a-39cd12328d63",
        "name": "Prime Solo Routes",
        "description": "Routes setup to test registration, login, and getting basic user data from the server.",
        "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
    },
    "item": [
        {
            "name": "http://localhost:5001/api/user/register",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"username\":\"new-user\",\n    \"password\":\"1234\"\n}"
                },
                "url": "http://localhost:5001/api/user/register",
                "description": "Registration"
            },
            "response": []
        },
        {
            "name": "http://localhost:5001/api/user/login",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"username\":\"new-user\",\n    \"password\":\"1234\"\n}"
                },
                "url": "http://localhost:5001/api/user/login",
                "description": "Login"
            },
            "response": []
        },
        {
            "name": "http://localhost:5001/api/user/",
            "request": {
                "method": "GET",
                "header": [],
                "body": {
                    "mode": "formdata",
                    "formdata": []
                },
                "url": "http://localhost:5001/api/user/",
                "description": "User Info"
            },
            "response": []
        }
    ]
}

----
README.md
# Prime Solo Project - Starting Repo

This version uses React, Redux, Express, Passport, and PostgreSQL (a full list of dependencies can be found in `package.json`).

We **STRONGLY** recommend following these instructions carefully. It's a lot, and will take some time to set up, but your life will be much easier this way in the long run.

## Use the Template for This Repository (Don't Clone)

- Don't Fork or Clone. Instead, click the `Use this Template` button, and make a copy to your personal account. Make the project `PUBLIC`!

## Prerequisites

Before you get started, make sure you have the following software installed on your computer:

- [Node.js](https://nodejs.org/en)
- [PostgreSQL](https://www.postgresql.org)
- [Nodemon](https://nodemon.io)

## Create Database and Table

Create a new database called `prime_app` and create a `user` table:

```SQL
CREATE TABLE "user" (
    "id" SERIAL PRIMARY KEY,
    "username" VARCHAR (80) UNIQUE NOT NULL,
    "password" VARCHAR (1000) NOT NULL
);
```

If you would like to name your database something else, you will need to change `prime_app` to the name of your new database name in `server/modules/pool.js`.

## Development Setup Instructions

- Run `npm install`.
    - Be sure to take stock of `package.json` to see which dependencies you'll need to add.
- Create a `.env` file at the root of the project and paste this line into the file:

```plaintext
SERVER_SESSION_SECRET=superDuperSecret
```

While you're in your new `.env` file, take the time to replace `superDuperSecret` with some long random string like `25POUbVtx6RKVNWszd9ERB9Bb6` to keep your application secure. Here's a site that can help you: [Password Generator Plus](https://passwordsgenerator.net). If you don't do this step, create a secret with less than eight characters, or leave it as `superDuperSecret`, you will get a warning.

- Start postgres if not running already by using opening up the [Postgres.app](https://postgresapp.com), or if using [Homebrew](https://brew.sh) you can use the command `brew services start postgresql`.
- Run `npm run server` to start the server.
- Run `npm run client` to start the client.
- Navigate to `localhost:5173`.

## Debugging

To debug, you will need to run the client-side separately from the server. Start the client by running the command `npm run client`. Start the debugging server by selecting the Debug button.

![VSCode Toolbar](documentation/images/vscode-toolbar.png)

Then make sure `Launch Program` is selected from the dropdown, then click the green play arrow.

![VSCode Debug Bar](documentation/images/vscode-debug-bar.png)

## Testing Routes with Postman

To use Postman with this repo, you will need to set up requests in Postman to register a user and login a user at a minimum.

Keep in mind that once you using the login route, Postman will manage your session cookie for you just like a browser, ensuring it is sent with each subsequent request. If you delete the `localhost` cookie in Postman, it will effectively log you out.

1. Run `npm run server` to start the server.
2. Import the sample routes JSON file [v2](./PostmanPrimeSoloRoutesv2.json) by clicking `Import` in Postman. Select the file.
3. Click `Collections` and `Send` the following three calls in order:
   1. `POST /api/user/register` registers a new user, see body to change username/password.
   2. `POST /api/user/login` will login a user, see body to change username/password.
   3. `GET /api/user` will get user information, by default it's not very much.

After running the login route above, you can try any other route you've created that requires a logged in user!

## Production Build

Before pushing to Heroku, run `npm run build` in terminal. This will create a build folder that contains the code Heroku will be pointed at. You can test this build by typing `npm start`. Keep in mind that `npm start` will let you preview the production build but will **not** auto update.

- Start postgres if not running already by using opening up the [Postgres.app](https://postgresapp.com), or if using [Homebrew](https://brew.sh) you can use the command `brew services start postgresql`.
- Run `npm start`.
- Navigate to `localhost:5173`.

## Lay of the Land

There are a few videos linked below that show a walkthrough the client and sever setup to help acclimatize to the boilerplate. Please take some time to watch the videos in order to get a better understanding of what the boilerplate is like.

- [Initial Set](https://vimeo.com/453297271)
- [Server Walkthrough](https://vimeo.com/453297212)
- [Client Walkthrough](https://vimeo.com/453297124)

Directory Structure:

- `src/` contains the React application.
- `public/` contains static assets for the client-side.
- `build/` after you build the project, contains the transpiled code from `src/` and `public/` that will be viewed on the production site.
- `server/` contains the Express App.

This code is also heavily commented. We recommend reading through the comments, getting a lay of the land, and becoming comfortable with how the code works before you start making too many changes. If you're wondering where to start, consider reading through component file comments in the following order:

- src/components
  - App/App
  - Footer/Footer
  - Nav/Nav
  - AboutPage/AboutPage
  - InfoPage/InfoPage
  - UserPage/UserPage
  - LoginPage/LoginPage
  - RegisterPage/RegisterPage
  - LogOutButton/LogOutButton
  - ProtectedRoute/ProtectedRoute

## Deployment

1. Create a new Heroku project.
1. Link the Heroku project to the project GitHub Repo.
1. Create an Heroku Postgres database.
1. Connect to the Heroku Postgres database from Postico.
1. Create the necessary tables.
1. Add an environment variable for `SERVER_SESSION_SECRET` with a nice random string for security.
1. In the deploy section, select manual deploy.

## Update Documentation

Customize this ReadMe and the code comments in this project to read less like a starter repo and more like a project. Here is an example: https://gist.github.com/PurpleBooth/109311bb0361f32d87a2.

----

## Email setup using MailChimp

* If you have not already created a `.env` file at the root of the project, create one.
* Create a MailChimp account.  You should be able to use a free account for the basic functionality of this application.
* [Create an API key in your account](https://mailchimp.com/help/about-api-keys/#Generate_an_API_key). 
* Insert your API key into your `.env` file with the name `MAILCHIMP_SECRET`.  For example:

```plaintext
MAILCHIMP_SECRET=FooVX5hooooSAMPLEAPIKEYooood4mXV7RUt2N6v
```



----
database.sql
-- USER is a reserved keyword with Postgres
-- You must use double quotes in every query that user is in:
-- ex. SELECT * FROM "user";
-- Otherwise you will have errors!
CREATE TABLE "user" (
    "id" SERIAL PRIMARY KEY,
    "username" VARCHAR (80) UNIQUE NOT NULL,
	"first_name" varchar(25),
	"last_name" varchar(25),
	"email" varchar(400),
	"birthday" date,
	"password" varchar(1000),
	"created_at" date default current_date
);

CREATE TABLE "box_ribbon" (
    "id" SERIAL PRIMARY KEY,
	"media_url" varchar(2048)
);

CREATE TABLE "memento_box" (
    "id" SERIAL PRIMARY KEY,
	"box_color" varchar(25),
	"delivery_date" date,
	"collaborator_note" varchar(300) null,
	"user_id" integer references "user",
	"created_at" date default current_date,
	"box_ribbon_id" integer references "box_ribbon",
	"recipient_name" varchar(50),
	"recipient_email" varchar(50)
);

CREATE TABLE "media_type" (
    "id" SERIAL PRIMARY KEY,
	"type" varchar(200)
);

CREATE TABLE "collaborator" (
    "id" SERIAL PRIMARY KEY,
	"box_id" integer references "memento_box",
	"user_id" integer references "user",
	"invitation_code" varchar(1028),
	"email" varchar(400),
	"accepted" bool,
	"first_name" varchar(25),
	"last_name" varchar(25),
	"created_at" date default current_date
);

CREATE TABLE "box_item" (
    "id" SERIAL PRIMARY KEY,
	"box_id" integer references "memento_box",
	"physical_gift" integer,
	"user_id" integer references "user",
	"media_url" varchar(2048),
	"title" varchar(200),
	"description" varchar(1000),
	"media_type" integer references "media_type",
	"created_at" date default current_date,
	"box_code" varchar(1028)
);

CREATE TABLE "box_thanks" (
    "id" SERIAL PRIMARY KEY,
	"message" varchar(1000),
	"box_id" integer references "memento_box",
	"created_at" date default current_date
);

CREATE TABLE "user_box_thanks" (
    "id" SERIAL PRIMARY KEY,
	"box_thanks_id" integer references "box_thanks",
	"user_id" integer references "user"
);

-- Sample data
INSERT INTO "box_ribbon" ("media_url")
VALUES ('https://m.media-amazon.com/images/I/81GcbpZPU5L.jpg'),
('https://i5.walmartimages.com/seo/PMU-Pull-String-Bows-Gift-Wedding-Birthdays-Anniversaries-Ribbon-Flowers-Basket-Decoration-Large-Bow-Wrapping-5-Inch-20-Loops-Gold-Pkg-25_f6c34141-3c12-456a-98e8-0afeb2ce33ed.b8639a1a56c9df6e20754fa95fc2a344.jpeg'),
('https://eagawards.com/cdn/shop/products/Silver-Shovel-Bow_2048x.png?v=1690481975');

INSERT INTO "memento_box" ("box_color", "delivery_date", "collaborator_note", "user_id", "box_ribbon_id", "recipient_name", "recipient_email")
VALUES ('dark', '2024-08-19', 'Happy birthday, friend!', 1, 2, 'Jason', 'jason@email.com');

INSERT INTO "collaborator" ("box_id", "user_id", "email", "first_name", "last_name")
VALUES (1, 1, 'alex@smith.com', 'Alex', 'Smith'),
(1, 1, 'alex@martinez.com', 'Alex', 'Martinez'),
(1, 1, 'max@jones.com', 'Max', 'Jones'),
(1, 1, 'eliot@matthews.com', 'Eliot', 'Matthews');


----
index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="theme-color" content="#000000">
    <title>Prime Solo Project</title>
  </head>
  <body>
    <noscript>
      You need to enable JavaScript to run this app.
    </noscript>
    <div id="react-root"></div>
    <script type="module" src="/src/index.jsx"></script>
  </body>
</html>

----
package.json
{
  "name": "prime-solo-project",
  "version": "1.0.0",
  "private": true,
  "engines": {
    "node": ">=18.x"
  },
  "dependencies": {
    "@cloudinary/react": "^1.13.0",
    "@cloudinary/url-gen": "^1.19.0",
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@fontsource/roboto": "^5.0.13",
    "@mailchimp/mailchimp_transactional": "^1.0.59",
    "@mui/icons-material": "^5.15.21",
    "@mui/material": "^5.15.21",
    "axios": "^1.6.8",
    "bcryptjs": "^2.4.3",
    "cloudinary": "^2.2.0",
    "connect-pg-simple": "^9.0.1",
    "dotenv": "^16.0.3",
    "express": "^4.17.1",
    "express-session": "^1.18.0",
    "node-file-parser": "^2.2.2",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "pg": "^8.5.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-modal": "^3.16.1",
    "react-redux": "^7.2.6",
    "react-router-dom": "^5.3.4",
    "redux": "^4.1.2",
    "redux-logger": "^3.0.6",
    "redux-saga": "^1.1.3"
  },
  "scripts": {
    "start": "node server/server.js",
    "client": "vite",
    "server": "nodemon --watch server server/server.js",
    "build": "vite build",
    "test": "vitest"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.2.1",
    "nodemon": "^3.1.0",
    "vite": "^5.2.11",
    "vitest": "^1.6.0"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not ie <= 11",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "heroku-run-build-script": true
}

----
server/constants/warnings.js
const badSecret = `
----------------------------

*** WARNING ***
Your application is not very secure.
You need to set SERVER_SESSION_SECRET to a better secret
Please follow the README and add a .env file

It should be
- longer than 8 characters
- not "superDuperSecret"

If this warning is showing on Heroku,
add or change your SERVER_SESSION_SECRET environment variable!

----------------------------`;

const exampleBadSecret = 'superDuperSecret';

module.exports = {
  badSecret,
  exampleBadSecret,
};

----
server/modules/authentication-middleware.js
const rejectUnauthenticated = (req, res, next) => {
  // check if logged in
  if (req.isAuthenticated()) {
    // They were authenticated! User may do the next thing
    // Note! They may not be Authorized to do all things
    next();
  } else {
    // failure best handled on the server. do redirect here.
    res.sendStatus(403);
  }
};

module.exports = { rejectUnauthenticated };

----
server/modules/encryption.js
// No changes should be required in this file

const bcrypt = require('bcryptjs');

const SALT_WORK_FACTOR = 10; // This determines how secure the salt should be

const encryptPassword = (password) => {
  const salt = bcrypt.genSaltSync(SALT_WORK_FACTOR); // This generates a random salt
  // This next line hashes the user password and the random salt
  // this salt and hash (and not the actual password) will then get stored in the database
  return bcrypt.hashSync(password, salt);
};

const comparePassword = (candidatePassword, storedPassword) => {
  /*
  This takes in the candidate password (what the user entered) to check it.
  The stored password has the original salt, so it will run the
  candidate password and salt through the same hashing process as before.
  If that result is the same as the stored password, then we have a match!
  If this interests you, check out this video https://www.youtube.com/watch?v=8ZtInClXe1Q
  */
  return bcrypt.compareSync(candidatePassword, storedPassword);
};

module.exports = {
  encryptPassword,
  comparePassword,
};

----
server/modules/pool.js
/* the only line you likely need to change is

 database: 'prime_app',

 change `prime_app` to the name of your database, and you should be all set!
*/

const pg = require('pg');
let pool;

// When our app is deployed to the internet 
// we'll use the DATABASE_URL environment variable
// to set the connection info: web address, username/password, db name
// eg: 
//  DATABASE_URL=postgresql://jDoe354:secretPw123@some.db.com/prime_app
if (process.env.DATABASE_URL) {
    pool = new pg.Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: {
            rejectUnauthorized: false
        }
    });
}
// When we're running this app on our own computer
// we'll connect to the postgres database that is 
// also running on our computer (localhost)
else {
    pool = new pg.Pool({
        host: 'localhost',
        port: 5432,
        database: 'prime_app',   // 	💥 Change this to the name of your database!
    });
}

module.exports = pool;

----
server/modules/session-middleware.js
// No changes should be required in this file

const expressSession = require('express-session');
const PgSession = require('connect-pg-simple')(expressSession);
const pool = require('./pool.js');
const warnings = require('../constants/warnings');

/*
  The session makes it so a user can enters their username and password one time,
  and then we can keep them logged in. We do this by giving them a really long random string
  that the browser will pass back to us with every single request. The long random string is
  something the server can confirm, and then we know that we have the right user.

  You can see this string that gets passed back and forth in the
  `application` ->  `storage` -> `cookies` section of the chrome debugger
*/

const serverSessionSecret = () => {
  if (
    !process.env.SERVER_SESSION_SECRET ||
    process.env.SERVER_SESSION_SECRET.length < 8 ||
    process.env.SERVER_SESSION_SECRET === warnings.exampleBadSecret
  ) {
    // Warning if user doesn't have a good secret
    console.log(warnings.badSecret);
  }

  return process.env.SERVER_SESSION_SECRET;
};

let pruneSessionInterval = 60;
if (process.env.NODE_ENV === 'test') {
    pruneSessionInterval = false;
}
module.exports = expressSession({
    store: new PgSession({
        pool,
        createTableIfMissing: true,
        pruneSessionInterval,
    }),
    secret: serverSessionSecret() || 'secret', // please set this in your .env file
    name: 'user', // this is the name of the req.variable. 'user' is convention, but not required
    saveUninitialized: false,
    resave: false,
    // This isn't currently being used but should be left in for future proofing
    cookie: {
      maxAge: 1000 * 60 * 60 * 24 * 7, // cookie expires after 7 days 
      httpOnly: true, // prevents client-side JS from accessing cookie 
      secure: false // can only be set to true if the app uses https
    },
});

----
server/routes/template.router.js
const express = require('express');
const pool = require('../modules/pool');
const router = express.Router();

/**
 * GET route template
 */
router.get('/', (req, res) => {
  // GET route code here
});

/**
 * POST route template
 */
router.post('/', (req, res) => {
  // POST route code here
});

module.exports = router;

----
server/routes/upload.router.js
const express = require("express");
const {
  rejectUnauthenticated,
} = require("../modules/authentication-middleware");
const router = express.Router();
const cloudinary = require("cloudinary").v2;
require("dotenv").config;
/**
 * Example .env set up:
 * SERVER_SESSION_SECRET=
 * 
 * CLOUDINARY_CLOUD_NAME=
 * CLOUDINARY_API_KEY=
 * CLOUDINARY_API_SECRET=
 * UPLOAD_PRESET=
 */


// Cloudinary configuration
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

// Endpoint to get a sugned upload URL
router.get("/signed-url", rejectUnauthenticated, (req, res) => {
  const timestamp = Math.round(new Date().getTime() / 1000);
  const signature = cloudinary.utils.api_sign_request(
    {
        timestamp: timestamp,
        upload_preset: process.env.UPLOAD_PRESET
    },
    cloudinary.config().api_secret
  );

  res.json({ // Response (JSON)
    timestamp:timestamp,
    signature: signature,
    cloud_name: cloudinary.config().cloud_name,
    api_key:cloudinary.config().api_key,
    upload_preset: process.env.UPLOAD_PRESET
  });
});

module.exports = router;

----
server/routes/user.router.js
const express = require('express');
const {
  rejectUnauthenticated,
} = require('../modules/authentication-middleware');
const encryptLib = require('../modules/encryption');
const pool = require('../modules/pool');
const userStrategy = require('../strategies/user.strategy');

const router = express.Router();

// Handles Ajax request for user information if user is authenticated
router.get('/', rejectUnauthenticated, (req, res) => {
  // Send back user object from the session (previously queried from the database)
  res.send(req.user);
});

// Handles POST request with new user data
// The only thing different from this and every other post we've seen
// is that the password gets encrypted before being inserted
router.post('/register', (req, res, next) => {
  const username = req.body.username;
  const password = encryptLib.encryptPassword(req.body.password);
console.log(username, password);
  const queryText = `INSERT INTO "user" (username, password)
    VALUES ($1, $2) RETURNING id`;
    pool
    .query(queryText, [username, password])
    .then(() => res.sendStatus(201))
    .catch((err) => {
      console.log('User registration failed: ', err);
      res.sendStatus(500);
    });
});

// Handles login form authenticate/login POST
// userStrategy.authenticate('local') is middleware that we run on this route
// this middleware will run our POST if successful
// this middleware will send a 404 if not successful
router.post('/login', userStrategy.authenticate('local'), (req, res) => {
  res.sendStatus(200);
});

// clear all server session information about this user
router.post('/logout', (req, res, next) => {
  // Use passport's built-in method to log out the user
  req.logout((err) => {
    if (err) { return next(err); }
    res.sendStatus(200);
  });
});

module.exports = router;

----
server/routes/userInfo.router.js
const express = require('express');
const pool = require('../modules/pool');
const router = express.Router();
const {rejectUnauthenticated } = require('../modules/authentication-middleware');

// Route to get all user information and the boxes they have previously created
router.get('/', rejectUnauthenticated, (req, res) => {
    const userId = req.user.id;

    const queryText = `
        SELECT
            u.id as user_id, u.first_name, u.last_name, u.email, u.birthday, u.created_at as user_created_at,
            mb.id as box_id, mb.box_color, mb.delivery_date, mb.collaborator_note, mb.created_at as box_created_at,
            mb.recipient_name, mb.recipient_email, br.media_url as box_ribbon_media_url
        FROM "user" u
        LEFT JOIN memento_box mb ON u.id = mb.user_id
        LEFT JOIN box_ribbon br ON mb.box_ribbon_id = br.id
        WHERE u.id = $1;
    `;

    pool.query(queryText, [userId])
        .then(result => {
            if (result.rows.length === 0) {
                return res.status(404).send('User not found');
            }

            const userInfo = {
                user_id: result.rows[0].user_id,
                first_name: result.rows[0].first_name,
                last_name: result.rows[0].last_name,
                email: result.rows[0].email,
                birthday: result.rows[0].birthday,
                user_created_at: result.rows[0].user_created_at,
                boxes: []
            };

            result.rows.forEach(row => {
                if (row.box_id) {
                    userInfo.boxes.push({
                        box_id: row.box_id,
                        box_color: row.box_color,
                        delivery_date: row.delivery_date,
                        collaborator_note: row.collaborator_note,
                        box_created_at: row.box_created_at,
                        recipient_name: row.recipient_name,
                        recipient_email: row.recipient_email,
                        box_ribbon_media_url: row.box_ribbon_media_url
                    });
                }
            });

            res.sendStatus(200).json(userInfo);
        })
        .catch(err => {
            console.error('Error executing user info GET query', err);
            res.sendStatus(500).send('Server error');
        });
});

module.exports = router;

----
server/server.js
const express = require('express');
const app = express();
require('dotenv').config();
const PORT = process.env.PORT || 5001;

// Middleware Includes
const sessionMiddleware = require('./modules/session-middleware');
const passport = require('./strategies/user.strategy');

// Route Includes
const userRouter = require('./routes/user.router');
const uploadRouter = require('./routes/upload.router');
const userInfoRouter = require('./routes/userInfo.router');

// Express Middleware
app.use(express.json());
app.use(express.urlencoded({extended: true}));
app.use(express.static('build'));

// Passport Session Configuration
app.use(sessionMiddleware);

// Start Passport Sessions
app.use(passport.initialize());
app.use(passport.session());

// Routes
app.use('/api/user', userRouter);
app.use('/api/upload', uploadRouter);
app.use('/api/userInfo', userInfoRouter);

// Listen Server & Port
app.listen(PORT, () => {
  console.log(`Listening on port: ${PORT}`);
});

----
server/strategies/user.strategy.js
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const encryptLib = require('../modules/encryption');
const pool = require('../modules/pool');

passport.serializeUser((user, done) => {
  done(null, user.id);
});

passport.deserializeUser((id, done) => {
  pool
    .query('SELECT * FROM "user" WHERE id = $1', [id])
    .then((result) => {
      // Handle Errors
      const user = result && result.rows && result.rows[0];

      if (user) {
        // user found
        delete user.password; // remove password so it doesn't get sent
        // done takes an error (null in this case) and a user
        done(null, user);
      } else {
        // user not found
        // done takes an error (null in this case) and a user (also null in this case)
        // this will result in the server returning a 401 status code
        done(null, null);
      }
    })
    .catch((error) => {
      console.log('Error with query during deserializing user ', error);
      // done takes an error (we have one) and a user (null in this case)
      // this will result in the server returning a 500 status code
      done(error, null);
    });
});

// Does actual work of logging in
passport.use(
  'local',
  new LocalStrategy((username, password, done) => {
    pool
      .query('SELECT * FROM "user" WHERE username = $1', [username])
      .then((result) => {
        const user = result && result.rows && result.rows[0];
        if (user && encryptLib.comparePassword(password, user.password)) {
          // All good! Passwords match!
          // done takes an error (null in this case) and a user
          done(null, user);
        } else {
          // Not good! Username and password do not match.
          // done takes an error (null in this case) and a user (also null in this case)
          // this will result in the server returning a 401 status code
          done(null, null);
        }
      })
      .catch((error) => {
        console.log('Error with query for user ', error);
        // done takes an error (we have one) and a user (null in this case)
        // this will result in the server returning a 500 status code
        done(error, null);
      });
  })
);

module.exports = passport;

----
src/components/AboutPage/AboutPage.jsx
import React from 'react';

// This is one of our simplest components
// It doesn't have local state,
// It doesn't dispatch any redux actions or display any part of redux state
// or even care what the redux state is'

function AboutPage() {
  return (
    <div className="container">
      <div>
        <p>This about page is for anyone to read!</p>
      </div>
    </div>
  );
}

export default AboutPage;

----
src/components/App/App.css
html,
body,
#react-root {
  height: 100%;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  margin: 0px;
}

img {
  display: inline-block;
  max-width: 100%;
}

/* --------------------------------------------------------------------------------
Container
-------------------------------------------------------------------------------- */

.container {
  padding: 20px;
}
.box-edit-container {
  margin-top: 64px;
  margin-left: 240px;
}

/* --------------------------------------------------------------------------------
Button
-------------------------------------------------------------------------------- */

.btn {
  display: inline-block;
  padding: 10px 20px;
  border-color: #014041;
  border-width: 1px 1px 3px;
  border-radius: 4px;
  background-color: #00acb0;
  color: #f8f8f8;
  font-size: 1.1rem;
  outline: 0;
  cursor: pointer;
}

.btn_sizeMin {
  min-height: 50px;
  min-width: 100px;
}

.btn_sizeSm {
  padding: 10px 15px;
  font-size: 0.8rem;
}

.btn_sizeFull {
  display: block;
  width: 100%;
}

.btn:hover {
  background-color: #008183;
  text-decoration: none;
}

/* This line makes the "Register" and "Login" buttons look like links */
.btn_asLink {
  padding: 0;
  border-width: 0;
  border-bottom: 1px solid #444;
  border-radius: 0;
  background: none;
  font: inherit;
  color: #444;
}

.btn_asLink:hover {
  background-color: transparent;
  border-color: #008183;
  color: #008183;
}

/* --------------------------------------------------------------------------------
Alert
-------------------------------------------------------------------------------- */

.alert {
  box-sizing: border-box;
  padding: 15px 10px;
  margin: 15px 0;
  border: 2px solid #e01616;
  background-color: #efefef;
  border-radius: 3px;
  color: #e01616;
  font-size: 0.8rem;
}

/* --------------------------------------------------------------------------------
Form Treatment
-------------------------------------------------------------------------------- */

.formPanel {
  box-sizing: border-box;
  width: 400px;
  max-width: 100%;
  padding: 25px;
  margin: 0 auto 20px;
  background-color: #efefef;
  border-radius: 3px;
  box-shadow: 0 1px 2px rgb(0, 0, 0, 0.4);
}

input {
  margin: 5px;
  margin-bottom: 10px;
}

----
src/components/App/App.jsx
import React, { useEffect } from 'react';
import {
  HashRouter as Router,
  Redirect,
  Route,
  Switch,
} from 'react-router-dom';

import { useDispatch, useSelector } from 'react-redux';

import Nav from '../Nav/Nav';
import Footer from '../Footer/Footer';

import ProtectedRoute from '../ProtectedRoute/ProtectedRoute';

import AboutPage from '../AboutPage/AboutPage';
import UserPage from '../UserPage/UserPage';
import InfoPage from '../InfoPage/InfoPage';
import LandingPage from '../LandingPage/LandingPage';
import LoginPage from '../LoginPage/LoginPage';
import RegisterPage from '../RegisterPage/RegisterPage';
import Photos from '../Photos/Photos';
import Videos from '../Videos/Videos';
import Letters from '../Letters/Letters';
import VoiceRecording from '../VoiceRecording/VoiceRecording';
import RecipientBox from '../RecipientBox/RecipientBox';
import RecipientPhotos from '../RecipientPhotos/RecipientPhotos';
import RecipientLetters from '../RecipientLetters/RecipientLetters';
import RecipientVoiceNotes from '../RecipientVoiceNotes/RecipientVoiceNotes';
import RecipientGifts from '../RecipientGifts/RecipientGifts';
import RecipientMixtape from '../RecipientMixtape/RecipientMixtape';
import RecipientVideos from '../RecipientVideos/RecipientVideos';

// Need to create these consolelog team
// import BoxSetupInformation from '../BoxSetupInformation/BoxSetupInformation';
// import BoxSetupDesign from '../BoxSetupDesign/BoxSetupDesign';
// import ContactUs from '../ContactUs/ContactUs';
// import MyBoxes from '../User/MyBoxes';

import './App.css';

function App() {
  const dispatch = useDispatch();

  const user = useSelector(store => store.user);

  useEffect(() => {
    dispatch({ type: 'FETCH_USER' });
  }, [dispatch]);

  return (
    <Router>
      <div>
        <Nav />
        <Switch>
          {/* Visiting localhost:5173 will redirect to localhost:5173/home */}
          <Redirect exact from="/" to="/home" />

          {/* Visiting localhost:5173/about will show the about page. */}
          <Route
            // shows AboutPage at all times (logged in or not)
            exact
            path="/about"
          >
            <AboutPage />
          </Route>

          {/* For protected routes, the view could show one of several things on the same route.
            Visiting localhost:5173/user will show the UserPage if the user is logged in.
            If the user is not logged in, the ProtectedRoute will show the LoginPage (component).
            Even though it seems like they are different pages, the user is always on localhost:5173/user */}
          <ProtectedRoute
            // logged in shows UserPage else shows LoginPage
            exact
            path="/user"
          >
            <UserPage />
          </ProtectedRoute>

          <ProtectedRoute
            // logged in shows InfoPage else shows LoginPage
            exact
            path="/info"
          >
            <InfoPage />
          </ProtectedRoute>

          <Route
            exact
            path="/login"
          >
            {user.id ?
              // If the user is already logged in, 
              // redirect to the /user page
              <Redirect to="/user" />
              :
              // Otherwise, show the login page
              <LoginPage />
            }
          </Route>

          <Route
            exact
            path="/registration"
          >
            {user.id ?
              // If the user is already logged in, 
              // redirect them to the /user page
              <Redirect to="/user" />
              :
              // Otherwise, show the registration page
              <RegisterPage />
            }
          </Route>

          <Route
            exact
            path="/home"
          >
            {user.id ?
              // If the user is already logged in, 
              // redirect them to the /user page
              <Redirect to="/user" />
              :
              // Otherwise, show the Landing page
              <LandingPage />
            }
          </Route>

          {/* Routes for box-turtles */}
          <ProtectedRoute
            // logged in shows imageUpload page else shows LoginPage
            exact
            path="/imageUpload"
          >
            <Photos />
          </ProtectedRoute>

          <ProtectedRoute
            // logged in shows videoUpload page else shows LoginPage
            exact
            path="/videoUpload"
          >
            <Videos />
          </ProtectedRoute>

          <ProtectedRoute
            // logged in shows letterUpload page else shows LoginPage
            exact
            path="/letterUpload"
          >
            <Letters />
          </ProtectedRoute>

          <ProtectedRoute
            // logged in shows voiceUpload page else shows LoginPage
            exact
            path="/voiceUpload"
          >
            <VoiceRecording />
          </ProtectedRoute>

          {/* Routes for console-log */}

          {/* <Route
            exact
            path="/box-setup-information"
          >
            <BoxSetupInformation />
          </Route>

          <Route
            exact
            path="/box-setup-design"
          >
            <BoxSetupDesign />
          </Route>

          <Route
            exact
            path="/contact-us"
          >
            <ContactUs />
          </Route>

          <ProtectedRoute
            exact
            path="/user/my-boxes"
          >
            <MyBoxes />
          </ProtectedRoute> */}

          {/* Routes for three-toed-turtles */}
          <Route exact path="/recipientbox">
            <RecipientBox />
          </Route>
          <Route exact path="/recipient/photos">
            <RecipientPhotos />
          </Route>
          <Route exact path="/recipient/videos">
            <RecipientVideos />
          </Route>
          <Route exact path="/recipient/voicenotes">
            <RecipientVoiceNotes />
          </Route>
          <Route exact path="/recipient/gifts">
            <RecipientGifts />
          </Route>
          <Route exact path="/recipient/mixtape">
            <RecipientMixtape />
          </Route>
          <Route exact path="/recipient/letters">
            <RecipientLetters />
          </Route>

          {/* If none of the other routes matched, we will show a 404. */}
          <Route>
            <h1>404</h1>
          </Route>
        </Switch>
        <Footer />
      </div>
    </Router>
  );
}

export default App;

----
src/components/Boxdesign/Boxdesign.jsx
const Boxdesign = () => {
  return (
    <>
      <h1>Box design setup</h1>
    </>
  );
};
export default Boxdesign;

----
src/components/EditingSidebar/EditingSidebar.jsx
import { Email, GraphicEq, Person, Photo, Preview, VideoLibrary } from "@mui/icons-material";
import {
  Box,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Toolbar,
  Typography,
} from "@mui/material";
import { useHistory } from "react-router-dom";

const drawerWidth = 240;

export default function EditingSidebar() {

    const history = useHistory();

  const drawer = (
    <Box>
      <Toolbar/>
      <Typography variant="h6" noWrap sx={{ padding: 2 }}>
        Build & Edit
      </Typography>
      <List>
        <ListItem button>
          <ListItemIcon>
            <Person />
          </ListItemIcon>
          <ListItemText primary="Admin Overview (WIP)" />
        </ListItem>
        <ListItem button onClick={()=>{history.push('/imageUpload')}}>
          <ListItemIcon>
            <Photo />
          </ListItemIcon>
          <ListItemText primary="Photos" />
        </ListItem>
        <ListItem button onClick={()=>{history.push('/videoUpload')}}>
          <ListItemIcon>
            <VideoLibrary />
          </ListItemIcon>
          <ListItemText primary="Videos" />
        </ListItem>
        <ListItem button onClick={()=>{history.push('/voiceUpload')}}>
          <ListItemIcon>
            <GraphicEq />
          </ListItemIcon>
          <ListItemText primary="Voice Notes" />
        </ListItem>
        <ListItem button onClick={()=>{history.push('/letterUpload')}}>
          <ListItemIcon>
            <Email />
          </ListItemIcon>
          <ListItemText primary="Letters" />
        </ListItem>
        <ListItem button>
          <ListItemIcon>
            <Preview />
          </ListItemIcon>
          <ListItemText primary="Preview (WIP)" />
        </ListItem>
      </List>
    </Box>
  );

  return (
    <Drawer
      variant="permanent"
      sx={{
        width: drawerWidth,
        flexShrink: 0,
        '& .MuiDrawer-paper': {
          width: drawerWidth,
          boxSizing: 'border-box',
          zIndex: 1,
        },
      }}
      open={open}
    >
      {drawer}
    </Drawer>
  );
}

----
src/components/Footer/Footer.css
footer {
  margin-top: 80px;
  padding: 20px;
  text-align: center;
}

----
src/components/Footer/Footer.jsx
import React from 'react';
import './Footer.css';

// This is one of our simplest components
// It doesn't have local state, so it can be a function component.
// It doesn't dispatch any redux actions or display any part of redux state
// or even care what the redux state is, so it doesn't need 'connect()'

function Footer() {
  return <footer>&copy; Prime Digital Academy</footer>;
}

export default Footer;

----
src/components/InfoPage/InfoPage.jsx
import React from 'react';

// This is one of our simplest components
// It doesn't have local state
// It doesn't dispatch any redux actions or display any part of redux state
// or even care what the redux state is

function InfoPage() {
  return (
    <div className="container">
      <p>Info Page</p>
    </div>
  );
}

export default InfoPage;

----
src/components/LandingPage/LandingPage.css
/* --------------------------------------------------------------------------------
Grid
-------------------------------------------------------------------------------- */

.grid {
  display: flex;
  flex: 0 1 auto;
  /* defaults to 'row' */
  flex-direction: row;
  flex-wrap: wrap;
  /* defaults to 'flex-start' */
  justify-content: flex-start;
  align-items: flex-start;
}

.grid-col {
  flex: 0 0 auto;
  padding: 0 0.5rem 0.5rem;
  box-sizing: border-box;
}

.grid-col_1 {
  flex-basis: 8.33333333%;
  max-width: 8.33333333%;
}

.grid-col_2 {
  flex-basis: 16.66666667%;
  max-width: 16.66666667%;
}

.grid-col_3 {
  flex-basis: 25%;
  max-width: 25%;
}

.grid-col_4 {
  flex-basis: 33.33333333%;
  max-width: 33.33333333%;
}

.grid-col_5 {
  flex-basis: 41.66666667%;
  max-width: 41.66666667%;
}

.grid-col_6 {
  flex-basis: 50%;
  max-width: 50%;
}

.grid-col_7 {
  flex-basis: 58.33333333%;
  max-width: 58.33333333%;
}

.grid-col_8 {
  flex-basis: 66.66666667%;
  max-width: 66.66666667%;
}

.grid-col_9 {
  flex-basis: 75%;
  max-width: 75%;
}

.grid-col_10 {
  flex-basis: 83.33333333%;
  max-width: 83.33333333%;
}

.grid-col_11 {
  flex-basis: 91.66666667%;
  max-width: 91.66666667%;
}

.grid-col_12 {
  flex-basis: 100%;
  max-width: 100%;
}

----
src/components/LandingPage/LandingPage.jsx
import React, { useState } from 'react';
import { useHistory } from 'react-router-dom';
import './LandingPage.css';
import MementoBoxInfo from '../MementoBoxInfo/MementoBoxInfo';

function LandingPage() {
  const [heading, setHeading] = useState('Welcome');
  const history = useHistory();

  return (
    <div className="container">
      <h2>{heading}</h2>

      <div className="grid">
        <div className="grid-col grid-col_8">
          <MementoBoxInfo />
        </div>
      </div>
    </div>
  );
}

export default LandingPage;
----
src/components/Letters/Letters.jsx
const Letters = () => {

    return (
        <>
        Letters Go Here!
        </>
    )

}

export default Letters;
----
src/components/LogOutButton/LogOutButton.jsx
import React from 'react';
import { useDispatch } from 'react-redux';

function LogOutButton(props) {
  const dispatch = useDispatch();
  return (
    <button
      // This button shows up in multiple locations and is styled differently
      // because it's styled differently depending on where it is used, the className
      // is passed to it from it's parents through React props
      className={props.className}
      onClick={() => dispatch({ type: 'LOGOUT' })}
    >
      Log Out
    </button>
  );
}

export default LogOutButton;

----
src/components/LoginForm/LoginForm.jsx
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import {useSelector} from 'react-redux';

function LoginForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const errors = useSelector(store => store.errors);
  const dispatch = useDispatch();

  const login = (event) => {
    event.preventDefault();

    if (username && password) {
      dispatch({
        type: 'LOGIN',
        payload: {
          username: username,
          password: password,
        },
      });
    } else {
      dispatch({ type: 'LOGIN_INPUT_ERROR' });
    }
  }; // end login

  return (
    <form className="formPanel" onSubmit={login}>
      <h2>Login</h2>
      {errors.loginMessage && (
        <h3 className="alert" role="alert">
          {errors.loginMessage}
        </h3>
      )}
      <div>
        <label htmlFor="username">
          Username:
          <input
            type="text"
            name="username"
            required
            value={username}
            onChange={(event) => setUsername(event.target.value)}
          />
        </label>
      </div>
      <div>
        <label htmlFor="password">
          Password:
          <input
            type="password"
            name="password"
            required
            value={password}
            onChange={(event) => setPassword(event.target.value)}
          />
        </label>
      </div>
      <div>
        <input className="btn" type="submit" name="submit" value="Log In" />
      </div>
    </form>
  );
}

export default LoginForm;

----
src/components/LoginPage/LoginPage.jsx
import React from 'react';
import LoginForm from '../LoginForm/LoginForm';
import { useHistory } from 'react-router-dom';

function LoginPage() {
  const history = useHistory();

  return (
    <div>
      <LoginForm />

      <center>
        <button
          type="button"
          className="btn btn_asLink"
          onClick={() => {
            history.push('/registration');
          }}
        >
          Register
        </button>
      </center>
    </div>
  );
}

export default LoginPage;

----
src/components/MementoBoxInfo/MementoBoxInfo.css
  h2 {
    margin-bottom: 10px;
  }
  
  p {
    margin-bottom: 10px;
  }
  
  ul {
    list-style-type: none;
    padding-left: 0;
  }
  
  li {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
  }
  
  .icon {
    margin-right: 10px;
    width: 24px; 
    height: 24px; 
  }
  
----
src/components/MementoBoxInfo/MementoBoxInfo.jsx
import React from 'react';
import './MementoBoxInfo.css';

const MementoBoxInfo = () => {
  return (
    <div className='memento-box-info'>
      <div className='section'>
        <h2>What's a Memento Box?</h2>
        <p>Memento is a collaboration platform for groups to put together digital “boxes” around celebrations for loved ones. Collect videos, photos, voice memos, playlists, and more to package into a digital box and send to someone.</p>
        <p>Memento is there for any occasion you want to celebrate - birthdays, anniversaries, weddings, retirements, you name it.</p>
      </div>
      <div className='section'>
        <h2>What's “inside” a Memento Box?</h2>
        <p>Well... that's up to you! Memento Box supports the following features:</p>
        <ul>
          <li>
            <img src="/icons/video-player.png" alt="Video Compilation" className="icon" />
            Video compilation
          </li>
          <li>
            <img src="/icons/camera.png" alt="Photo Slideshow" className="icon" />
            Photo slideshow
          </li>
          <li>
            <img src="/icons/collaborate.png" alt="Collaborate with Others" className="icon" />
            Collaborate with others
          </li>
          <li>
            <img src="/icons/audio.png" alt="Audio Recordings" className="icon" />
            Audio recordings
          </li>
          <li>
            <img src="/icons/writing-hand.png" alt="Upload Handwritten Letters" className="icon" />
            Upload handwritten letters
          </li>
          <li>
            <img src="/icons/gift.png" alt="Add Collaborative Gifts" className="icon" />
            Add collaborative gifts
          </li>
        </ul>
      </div>
    </div>
  );
}

export default MementoBoxInfo;
----
src/components/Nav/Nav.css
.nav {
  /* flex box layout */
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 64px;
  background-color: #00acb0;
  overflow: hidden;
  top: 0;
  width: 100%;
}
.edit-nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 64px;
  margin: 0 0 30px;
  background-color: #00acb0;
  overflow: hidden;
  z-index: 2;
  position: fixed;
  top: 0;
  width: 100%;
}

.nav a,
.edit-nav a {
  text-decoration: none;
}

.nav-title {
  font-size: 24px;
  font-weight: 700;
  color: #f2f2f2;
  padding-left: 10px;
  margin: 0;
}

.navLink {
  display: inline-block;
  color: #f2f2f2;
  background-color: #00acb0;
  text-align: center;
  padding: 24px 10px;
  text-decoration: none;
  font-size: 15px;

  /* these last two make the logout button in
  the nav bar look like another link */
  border: none;
  cursor: pointer;
  outline: 0;
}

.navLink:hover {
  background-color: #008183;
}

----
src/components/Nav/Nav.jsx
// src/components/Nav/Nav.jsx

import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import LogOutButton from '../LogOutButton/LogOutButton';
import './Nav.css';
import { useSelector } from 'react-redux';
import { useLocation } from 'react-router-dom';

function Nav() {
  const user = useSelector((store) => store.user);
  const location = useLocation();
  const [isEdit,setIsEdit] = useState(false);

  useEffect(() => {
    const editPaths = ['/imageUpload', '/videoUpload', '/letterUpload', '/voiceUpload'];
    if(editPaths.includes(location.pathname)) {
      setIsEdit(true);
    } else {
      setIsEdit(false);
    }
  }, [location])


  return (
    <div className={isEdit ? "edit-nav" : "nav"}>
      <Link to="/home">
        <h2 className="nav-title">Prime Solo Project</h2>
      </Link>
      <div>
        {/* If no user is logged in, show these links */}
        {!user.id && (
          // If there's no user, show login/registration links
          <Link className="navLink" to="/login">
            Login / Register
          </Link>
        )}

        {/* If a user is logged in, show these links */}
        {user.id && (
          <>
            <Link className="navLink" to="/user">
              Home
            </Link>

            <Link className="navLink" to="/info">
              Info Page
            </Link>

            <Link className="navLink" to="/recipientbox">
              Recipient Box
            </Link>

            <LogOutButton className="navLink" />
          </>
        )}

        <Link className="navLink" to="/about">
          About
        </Link>
      </div>
    </div>
  );
}

export default Nav;

----
src/components/Photos/Photos.jsx

const Photos = () => {

    return (
        <>
        Photos Go Here!
        </>
    )

}

export default Photos;
----
src/components/ProtectedRoute/ProtectedRoute.jsx
import React from 'react';
import { Route, Redirect } from 'react-router-dom';
import LoginPage from '../LoginPage/LoginPage';
import {useSelector} from 'react-redux';

// A Custom Wrapper Component -- This will keep our code DRY.
// Responsible for watching redux state, and returning an appropriate component
// API for this component is the same as a regular route

// THIS IS NOT SECURITY! That must be done on the server
// A malicious user could change the code and see any view
// so your server-side route must implement real security
// by checking req.isAuthenticated for authentication
// and by checking req.user for authorization

function ProtectedRoute({ component, children, ...props }) {
  const user = useSelector((store) => store.user);

  // Component may be passed in as a "component" prop,
  // or as a child component.
  const ProtectedComponent = component || (() => children);

  // We return a Route component that gets added to our list of routes
  return (
    <Route
      // all props like 'exact' and 'path' that were passed in
      // are now passed along to the 'Route' Component
      {...props}
    >
      {user.id ?
        // If the user is logged in, show the protected component
        <ProtectedComponent />
        :
        // Otherwise, redirect to the Loginpage
        <LoginPage />
      }
    </Route>

  );
}

export default ProtectedRoute;

----
src/components/RecipientBox/RecipientBox.css
#boxClosed {
    position: relative;
    width: 790px;
    height: 800px;
    grid-column: 2;
    grid-row: 1;
}

.animation {
    animation-name: openBox;
    animation-duration: 5s;
    animation-iteration-count: 1;
    animation-fill-mode: forwards;
}

#boxOpen {
    position: relative;
    grid-column: 2;
    grid-row: 1;
    width: 790px;
    height: 800px;
}

#grid {
    display: grid;
    grid-template-columns: 400px 800px 200px;
    grid-template-rows: 200px 200px 200px;
}

#collaborators {
    margin: 20px;
    grid-column: 1;
    grid-row: 2
}
.person {
    margin: 0px;
}

#from {
    margin: 2px;
}

@keyframes openBox {
    from { left: 0px; }
    to { left: 700px; }
}
----
src/components/RecipientBox/RecipientBox.jsx
import React, { useState, useEffect } from 'react';
import Modal from 'react-modal';
import RecipientPhotos from '../RecipientPhotos/RecipientPhotos';
import RecipientVideos from '../RecipientVideos/RecipientVideos';
import RecipientVoiceNotes from '../RecipientVoiceNotes/RecipientVoiceNotes';
import RecipientGifts from '../RecipientGifts/RecipientGifts';
import RecipientMixtape from '../RecipientMixtape/RecipientMixtape';
import RecipientLetters from '../RecipientLetters/RecipientLetters';
import './RecipientBox.css';

Modal.setAppElement('#react-root'); // Ensure this matches your root element ID

function RecipientBox() {
    const [openBox, setOpenBox] = useState(false);
    const [modalIsOpen, setModalIsOpen] = useState(false);
    const [modalContent, setModalContent] = useState(null);
    const [greeting, setGreeting] = useState('Happy Birthday');
    const [collabs, setCollabs] = useState(['Lons', 'Sarah', 'Sean', 'Zoe']);

    const openModal = (content) => {
        setModalContent(content);
        setModalIsOpen(true);
    };

    const closeModal = () => {
        setModalIsOpen(false);
        setModalContent(null);
    };

    useEffect(() => {
        // Any additional setup can go here
    }, []);

    return (
        <div id='grid'>
            <div id="collaborators">
                <h3 id='greeting'>{greeting}</h3>
                <h6 id='from'>From:</h6>
                {collabs.map((person) => 
                    <p className='person' key={person}>{person}</p>
                )}
            </div>
            <img src='/RecipientBoxOpen.png' id='boxOpen' useMap='#image-map'/>
            <map name="image-map">
                <area alt="Photos" title="Photos" href="#" onClick={() => openModal(<RecipientPhotos />)} coords="89,71,249,303" shape="rect" />
                <area alt="Videos" title="Videos" href="#" onClick={() => openModal(<RecipientVideos />)} coords="254,78,529,269" shape="rect" />
                <area alt="Voice notes" title="Voice notes" href="#" onClick={() => openModal(<RecipientVoiceNotes />)} coords="270,352,540,274" shape="rect" />
                <area alt="Gifts" title="Gifts" href="#" onClick={() => openModal(<RecipientGifts />)} coords="92,310,245,417" shape="rect" />
                <area alt="Mixtape" title="Mixtape" href="#" onClick={() => openModal(<RecipientMixtape />)} coords="80,422,262,537" shape="rect" />
                <area alt="Letters" title="Letters" href="#" onClick={() => openModal(<RecipientLetters />)} coords="266,357,538,535" shape="rect" />
            </map>
            <img 
                src='/RecipientBoxClosed.png' 
                id='boxClosed' 
                onClick={() => setOpenBox(true)}
                className={openBox ? 'animation' : ''}
            />
            <Modal
                isOpen={modalIsOpen}
                onRequestClose={closeModal}
                contentLabel="Recipient Box Modal"
            >
                {modalContent}
                <button onClick={closeModal}>Close</button>
            </Modal>
        </div>
    );
}

export default RecipientBox;

----
src/components/RecipientGifts/RecipientGifts.css

----
src/components/RecipientGifts/RecipientGifts.jsx
import React from 'react';
import './RecipientGifts.css';

function RecipientGifts() {
  return (
    <div className="container">
      <h1>Gifts</h1>
      <p>Gifts will be displayed here.</p>
    </div>
  );
}

export default RecipientGifts;

----
src/components/RecipientLetters/RecipientLetters.css

----
src/components/RecipientLetters/RecipientLetters.jsx
import React from 'react';
import './RecipientLetters.css';

function RecipientLetters() {
  return (
    <div className="container">
      <h1>Letters</h1>
      <p>Letters will be displayed here.</p>
    </div>
  );
}

export default RecipientLetters;

----
src/components/RecipientMixtape/RecipientMixtape.css

----
src/components/RecipientMixtape/RecipientMixtape.jsx
import React from 'react';
import './RecipientMixtape.css';

function RecipientMixtape() {
  return (
    <div className="container">
      <h1>Mixtape</h1>
      <p>Mixtapes will be displayed here.</p>
    </div>
  );
}

export default RecipientMixtape;

----
src/components/RecipientPhotos/RecipientPhotos.css

----
src/components/RecipientPhotos/RecipientPhotos.jsx
import React from 'react';
import './RecipientPhotos.css';

function RecipientPhotos() {
  return (
    <div className="container">
      <h1>Photos</h1>
      <p>Photos will be displayed here.</p>
    </div>
  );
}

export default RecipientPhotos;

----
src/components/RecipientVideos/RecipientVideos.css

----
src/components/RecipientVideos/RecipientVideos.jsx
import React from 'react';
import './RecipientVideos.css';

function RecipientVideos() {
  return (
    <div className="container">
      <h1>Videos</h1>
      <p>Videos will be displayed here.</p>
    </div>
  );
}

export default RecipientVideos;

----
src/components/RecipientVoiceNotes/RecipientVoiceNotes.css

----
src/components/RecipientVoiceNotes/RecipientVoiceNotes.jsx
import React from 'react';
import './RecipientVoiceNotes.css';

function RecipientVoiceNotes() {
  return (
    <div className="container">
      <h1>Voice Notes</h1>
      <p>Voice Notes will be displayed here.</p>
    </div>
  );
}

export default RecipientVoiceNotes;

----
src/components/RegisterForm/RegisterForm.jsx
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';

function RegisterForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const errors = useSelector((store) => store.errors);
  const dispatch = useDispatch();

  const registerUser = (event) => {
    event.preventDefault();

    dispatch({
      type: 'REGISTER',
      payload: {
        username: username,
        password: password,
      },
    });
  }; // end registerUser

  return (
    <form className="formPanel" onSubmit={registerUser}>
      <h2>Register User</h2>
      {errors.registrationMessage && (
        <h3 className="alert" role="alert">
          {errors.registrationMessage}
        </h3>
      )}
      <div>
        <label htmlFor="username">
          Username:
          <input
            type="text"
            name="username"
            value={username}
            required
            onChange={(event) => setUsername(event.target.value)}
          />
        </label>
      </div>
      <div>
        <label htmlFor="password">
          Password:
          <input
            type="password"
            name="password"
            value={password}
            required
            onChange={(event) => setPassword(event.target.value)}
          />
        </label>
      </div>
      <div>
        <input className="btn" type="submit" name="submit" value="Register" />
      </div>
    </form>
  );
}

export default RegisterForm;

----
src/components/RegisterPage/RegisterPage.jsx
import React from 'react';

import { useHistory } from 'react-router-dom';
import RegisterForm from '../RegisterForm/RegisterForm';

function RegisterPage() {
  const history = useHistory();

  return (
    <div>
      <RegisterForm />

      <center>
        <button
          type="button"
          className="btn btn_asLink"
          onClick={() => {
            history.push('/login');
          }}
        >
          Login
        </button>
      </center>
    </div>
  );
}

export default RegisterPage;

----
src/components/TemplateClass/TemplateClass.jsx
import React, { Component } from 'react';
import { connect } from 'react-redux';

// Basic class component structure for React with default state
// value setup. When making a new component be sure to replace
// the component name TemplateClass with the name for the new
// component.

// YOU CANNOT USE HOOKS IN CLASS COMPONENTS -- usually Higher Order Components are used instead
// Class Components have different syntax, including `this`

class TemplateClass extends Component {
  state = {
    heading: 'Class Component',
  };

  render() {
    return (
      <div>
        <h2>{this.state.heading}</h2>
      </div>
    );
  }
}

const mapStoreToProps = (reduxStore) => {
  return {
    store: reduxStore,
  };
};

export default connect(mapStoreToProps)(TemplateClass);

----
src/components/TemplateFunction/TemplateFunction.jsx
import React, { useState } from 'react';
import {useSelector} from 'react-redux';

// Basic functional component structure for React with default state
// value setup. When making a new component be sure to replace the
// component name TemplateFunction with the name for the new component.
function TemplateFunction(props) {
  // Using hooks we're creating local state for a "heading" variable with
  // a default value of 'Functional Component'
  const store = useSelector((store) => store);
  const [heading, setHeading] = useState('Functional Component');

  return (
    <div>
      <h2>{heading}</h2>
    </div>
  );
}

export default TemplateFunction;

----
src/components/UserPage/UserPage.jsx
import React from 'react';
import LogOutButton from '../LogOutButton/LogOutButton';
import {useSelector} from 'react-redux';

function UserPage() {
  // this component doesn't do much to start, just renders some user reducer info to the DOM
  const user = useSelector((store) => store.user);
  return (
    <div className="container">
      <h2>Welcome, {user.username}!</h2>
      <p>Your ID is: {user.id}</p>
      <LogOutButton className="btn" />
    </div>
  );
}

// this allows us to use <App /> in index.js
export default UserPage;

----
src/components/Videos/Videos.jsx
const Videos = () => {

    return (
        <>
        Videos go here!
        </>
    )

}

export default Videos;
----
src/components/VoiceRecording/VoiceRecording.jsx
import { Typography } from "@mui/material";
import { useEffect, useState } from "react";

export default function VoiceRecording() {
  const [notes, setNotes] = useState([]); // State for notes to be rendered

  const fetchNotes = () => {
    // API call to retrieve relevant voice notes
    setNotes([]);
  };

  useEffect(() => {
    // Fetch voice notes on component load
    fetchNotes();
  }, []);

  return (
    <div className="box-edit-container">
      <div className="notes-actions">
        <button>Upload</button>
        {/* button will pull up small upload form */}
        <button>Record</button>
        {/* button will use recording package and post to Cloudinary */}
      </div>
      <div className="notes-display">
        {notes.length === 0 ? (
          <Typography> Added voice notes will display here! </Typography>
        ) : (
          notes.map((note) => 
            <div>
                {/* add headphone icon */}
                <Typography>{note.fileName}</Typography> {/* title */}
                {/* add play/pause */}
                {/* add visualization here */}
                {/* add length here */}
            </div>)
        )}
      </div>
    </div>
  );
}

----
src/hooks/useReduxStore.js
import { useSelector } from 'react-redux';

//These aren't used in the project, but are something you could use


//Custom Hook -- uses other hooks
const useReduxStore = () => {
  //accesses the useSelector hook and gives back entire store
  return useSelector((store) => store);
};

/*
EXAMPLE FOR A SELECTOR THAT GETS SOMETHING SPECIFIC

const useUser = () => {
  return useSelector(store => store.user)
}
*/

export default useReduxStore;

----
src/index.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import store from './redux/store';
import App from './components/App/App';

const rootElement = document.getElementById('react-root'); 

if (rootElement) {
  const root = ReactDOM.createRoot(rootElement);
  root.render(
    <React.StrictMode>
      <Provider store={store}>
        <App />
      </Provider>
    </React.StrictMode>
  );
} else {
  console.error('Root element not found');
}

----
src/redux/reducers/_root.reducer.js
import { combineReducers } from 'redux';
import errors from './errors.reducer';
import user from './user.reducer';

// rootReducer is the primary reducer for our entire project
// It bundles up all of the other reducers so our project can use them.
// This is imported in index.js as rootSaga

// Lets make a bigger object for our store, with the objects from our reducers.
// This is what we get when we use 'state' inside of 'mapStateToProps'
const rootReducer = combineReducers({
  errors, // contains registrationMessage and loginMessage
  user, // will have an id and username if someone is logged in
});

export default rootReducer;

----
src/redux/reducers/errors.reducer.js
import { combineReducers } from 'redux';

// loginMessage holds the string that will display
// on the login screen if there's an error
const loginMessage = (state = '', action) => {
  switch (action.type) {
    case 'CLEAR_LOGIN_ERROR':
      return '';
    case 'LOGIN_INPUT_ERROR':
      return 'Enter your username and password!';
    case 'LOGIN_FAILED':
      return "Oops! The username and password didn't match. Try again!";
    case 'LOGIN_FAILED_NO_CODE':
      return 'Oops! Something went wrong! Is the server running?';
    default:
      return state;
  }
};

// registrationMessage holds the string that will display
// on the registration screen if there's an error
const registrationMessage = (state = '', action) => {
  switch (action.type) {
    case 'CLEAR_REGISTRATION_ERROR':
      return '';
    case 'REGISTRATION_INPUT_ERROR':
      return 'Choose a username and password!';
    case 'REGISTRATION_FAILED':
      return "Oops! That didn't work. The username might already be taken. Try again!";
    default:
      return state;
  }
};

// make one object that has keys loginMessage, registrationMessage
// these will be on the redux state at:
// state.errors.loginMessage and state.errors.registrationMessage
export default combineReducers({
  loginMessage,
  registrationMessage,
});

----
src/redux/reducers/user.reducer.js
const userReducer = (state = {}, action) => {
  switch (action.type) {
    case 'SET_USER':
      return action.payload;
    case 'UNSET_USER':
      return {};
    default:
      return state;
  }
};

// user will be on the redux state at:
// state.user
export default userReducer;

----
src/redux/sagas/_root.saga.js
import { all } from 'redux-saga/effects';
import loginSaga from './login.saga';
import registrationSaga from './registration.saga';
import userSaga from './user.saga';

// rootSaga is the primary saga.
// It bundles up all of the other sagas so our project can use them.
// This is imported in index.js as rootSaga

// some sagas trigger other sagas, as an example
// the registration triggers a login
// and login triggers setting the user
export default function* rootSaga() {
  yield all([
    loginSaga(), // login saga is now registered
    registrationSaga(),
    userSaga(),
  ]);
}

----
src/redux/sagas/login.saga.js
import { put, takeLatest } from 'redux-saga/effects';
import axios from 'axios';

// worker Saga: will be fired on "LOGIN" actions
function* loginUser(action) {
  try {
    // clear any existing error on the login page
    yield put({ type: 'CLEAR_LOGIN_ERROR' });

    const config = {
      headers: { 'Content-Type': 'application/json' },
      withCredentials: true,
    };

    // send the action.payload as the body
    // the config includes credentials which
    // allow the server session to recognize the user
    yield axios.post('/api/user/login', action.payload, config);

    // after the user has logged in
    // get the user information from the server
    yield put({ type: 'FETCH_USER' });
  } catch (error) {
    console.log('Error with user login:', error);
    if (error.response.status === 401) {
      // The 401 is the error status sent from passport
      // if user isn't in the database or
      // if the username and password don't match in the database
      yield put({ type: 'LOGIN_FAILED' });
    } else {
      // Got an error that wasn't a 401
      // Could be anything, but most common cause is the server is not started
      yield put({ type: 'LOGIN_FAILED_NO_CODE' });
    }
  }
}

// worker Saga: will be fired on "LOGOUT" actions
function* logoutUser(action) {
  try {
    const config = {
      headers: { 'Content-Type': 'application/json' },
      withCredentials: true,
    };

    // the config includes credentials which
    // allow the server session to recognize the user
    // when the server recognizes the user session
    // it will end the session
    yield axios.post('/api/user/logout', config);

    // now that the session has ended on the server
    // remove the client-side user object to let
    // the client-side code know the user is logged out
    yield put({ type: 'UNSET_USER' });
  } catch (error) {
    console.log('Error with user logout:', error);
  }
}

function* loginSaga() {
  yield takeLatest('LOGIN', loginUser);
  yield takeLatest('LOGOUT', logoutUser);
}

export default loginSaga;

----
src/redux/sagas/registration.saga.js
import { put, takeLatest } from 'redux-saga/effects';
import axios from 'axios';

// worker Saga: will be fired on "REGISTER" actions
function* registerUser(action) {
  try {
    // clear any existing error on the registration page
    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });

    // passes the username and password from the payload to the server
    yield axios.post('/api/user/register', action.payload);

    // automatically log a user in after registration
    yield put({ type: 'LOGIN', payload: action.payload });

    // set to 'login' mode so they see the login screen
    // after registration or after they log out
    yield put({ type: 'SET_TO_LOGIN_MODE' });
  } catch (error) {
    console.log('Error with user registration:', error);
    yield put({ type: 'REGISTRATION_FAILED' });
  }
}

function* registrationSaga() {
  yield takeLatest('REGISTER', registerUser);
}

export default registrationSaga;

----
src/redux/sagas/user.saga.js
import axios from 'axios';
import { put, takeLatest } from 'redux-saga/effects';

// worker Saga: will be fired on "FETCH_USER" actions
function* fetchUser() {
  try {
    const config = {
      headers: { 'Content-Type': 'application/json' },
      withCredentials: true,
    };

    // the config includes credentials which
    // allow the server session to recognize the user
    // If a user is logged in, this will return their information
    // from the server session (req.user)
    const response = yield axios.get('/api/user', config);

    // now that the session has given us a user object
    // with an id and username set the client-side user object to let
    // the client-side code know the user is logged in
    yield put({ type: 'SET_USER', payload: response.data });
  } catch (error) {
    console.log('User get request failed', error);
  }
}

function* userSaga() {
  yield takeLatest('FETCH_USER', fetchUser);
}

export default userSaga;

----
src/redux/store.js
import { createStore, applyMiddleware } from 'redux';
import createSagaMiddleware from 'redux-saga';
import logger from 'redux-logger';

import rootReducer from './reducers/_root.reducer'; // imports ./redux/reducers/index.js
import rootSaga from './sagas/_root.saga'; // imports ./redux/sagas/index.js

const sagaMiddleware = createSagaMiddleware();

// this line creates an array of all of redux middleware you want to use
// we don't want a whole ton of console logs in our production code
// logger will only be added to your project if your in development mode
const middlewareList = process.env.NODE_ENV === 'development' ?
  [sagaMiddleware, logger] :
  [sagaMiddleware];

const store = createStore(
  // tells the saga middleware to use the rootReducer
  // rootSaga contains all of our other reducers
  rootReducer,
  // adds all middleware to our project including saga and logger
  applyMiddleware(...middlewareList),
);

// tells the saga middleware to use the rootSaga
// rootSaga contains all of our other sagas
sagaMiddleware.run(rootSaga);

export default store;
----
vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig(() => {
    return {
        build: {
            outDir: 'build',
        },
        server: {
            proxy: {
                "/api":'http://localhost:5001',
            }
        },
        plugins: [react()],
    };
});

--END--